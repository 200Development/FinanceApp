@model FinanceApp.ViewModels.AccountViewModel

@{
    ViewBag.Title = "Accounts";
}

<link rel="stylesheet" href="css/accounts.css" />


@using (Html.BeginForm("Create", "Accounts", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <partial name="_HeaderNavigationPartial" />
    </div>
    <div class="content">

        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="header">
                        <h4 class="title">Account Balances</h4>
                    </div>
                    <div class="content">
                        <div id="chartAccounts" class="ct-chart"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12" id="selectedAccountDiv">
                @Html.Hidden("selectedAccountId")
                <div class="card col-md-5 mx-auto border-dark text-center" id="selectedAccountCard">
                    <div class="card-title">
                        <div class="selectedInput selectedInputLabel">Name</div>
                        <div class="input-group justify-content-center selectedInput">
                            <input id="selectedAccountName" type="text" />
                        </div>
                    </div>
                    <div>
                        <div class="card-body">
                            <h3 id="selectedAccountEmptyText">Click on a row to edit or delete an account</h3>

                            <div class="selectedInputLabel">Balance</div>
                            <div class="input-group justify-content-center selectedInput">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">$</span>
                                </div>
                                <input class="input-group" id="selectedAccountBalance" step="0.01" type="number" />
                            </div>

                            <div class="selectedInputLabel">Required Savings</div>
                            <div class="input-group justify-content-center selectedInput">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">$</span>
                                </div>
                                <input class="input-group" id="selectedAccountRequiredSavings" step="0.01" type="number" />
                            </div>

                        </div>
                    </div>
                    <div class="card-footer" id="selectedAccountFooter">
                        <div id="footerOptions">
                            <button class="editButton btn btn-dark" id="editButton" value="Save"><i class="fa fa-edit editIcon"></i><span>Save</span></button>
                            <button class="deleteButton btn btn-dark" id="deleteButton" value="Delete"><i class="fa fa-trash deleteIcon"></i><span>Delete</span></button>
                            <button class="cancelButton btn btn-dark" id="cancelButton" value="Cancel"><i class="fa fa-ban cancelIcon"></i><span>Cancel</span></button>
                        </div>
                        <div id="deleteConfirmationDiv">
                            <p><span style="float: left; margin: 12px 12px 20px 0;"></span>Deleting this account will delete all transactions and bills associated with it. Are you sure?</p>
                            <div>
                                <button class="editButton btn btn-dark" id="yesDeleteButton" value="Yes"><span id="confirmAccountDeletionSpan">Yes</span></button>
                                <button class="deleteButton btn btn-dark" id="noDeleteButton" value="Cancel"><span id="cancelAccountDeletionSpan">Cancel</span></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @await Html.PartialAsync("_AccountsTable")
            </div>
        </div>
    </div>
}


@section scripts {

    <!--  Charts Plugin -->

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart'] });

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);

        // Callback that creates and populates a data table,
        // instantiates the bar chart, passes in the data and
        // draws it.
        function drawChart() {

            var accounts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Accounts));

            var accountArray = [['Account', 'Balance']];
            var totalBalance = 0;

            $.each(accounts,
                function(index, value) {
                    totalBalance += value.Balance;
                });

            $.each(accounts,
                function(index, value) {
                    accountArray.push([value.Name, value.Balance]);
                });

            const data = google.visualization.arrayToDataTable(accountArray);

            const options = {
                title: 'Account Balances',
                is3D: true,
                backgroundColor: '#212529'
            };

            const chart = new google.visualization.ColumnChart(document.getElementById('chartAccounts'));
            chart.draw(data, options);
        };

        function rowSelected(e) {
            const id = e.target.id.split('_')[1];

            $('#selectedAccountId').val(id);

            const name = $(`#accountName_${id}`).length
                ? $(`#accountName_${id}`).text()
                : '';
            let isNegativeBalance = false;
            let balanceText = $(`#accountBalance_${id}`).text()
                .replace('$', '')
                .replace(',', '');

            if (balanceText.indexOf('(') >= 0) {
                balanceText = balanceText.replace('(', '').replace(')', '');
                isNegativeBalance = true;
            }

            let balance = 0;
            if (!isNaN(Number(balanceText))) {
                balance = isNegativeBalance ? Number(balanceText) * -1 : Number(balanceText);
            }

            const requiredSavingsText = $(`#accountRequiredSavings_${id}`).text()
                .replace('$', '')
                .replace(',', '');

            const requiredSavings = isNaN(Number(requiredSavingsText))
                ? 0
                : Number(requiredSavingsText);

            $('#selectedAccountEmptyText').css('display', 'none');
            $('.selectedInput').css('display', 'flex');
            $('.selectedInputLabel').css('display', 'block');
            $('#selectedAccountFooter').css('display', 'block');
            $('#selectedAccountName').val(name);
            $('#selectedAccountBalance').val(balance);
            $('#selectedAccountRequiredSavings').val(requiredSavings);
        };

        function saveAccount(e) {
            e.preventDefault();
            e.stopPropagation();

            const data = {};
            data.Id = $('#selectedAccountId').val() != undefined ? $('#selectedAccountId').val() : null;
            data.Name = $('#selectedAccountName').val() != undefined ? $('#selectedAccountName').val() : '';
            data.Balance = $('#selectedAccountBalance').val() != undefined ? $('#selectedAccountBalance').val() : null;
            data.RequiredSavings = $('#selectedAccountRequiredSavings').val() != undefined
                ? $('#selectedAccountRequiredSavings').val()
                : null;

            $.ajax({
                type: 'POST',
                url: 'Accounts/EditAccount',
                dataType: 'json',
                data: data,
                success: function(result) {
                    window.location.reload();
                },
                failure: function(result) {
                    console.log('Failure: ' + result);
                },
                error: function(error) {
                    console.log('Error: ' + error);
                }
            });
        };

        function deleteAccount(e) {
            e.preventDefault();
            e.stopPropagation();


            $('#footerOptions').css('display', 'none');
            $('#deleteConfirmationDiv').css('display', 'block');

            //Unbind click event listener before adding to prevent stacking handler
            $('#yesDeleteButton').unbind('click');
            $('#noDeleteButton').unbind('click');

            $('#yesDeleteButton').click(deleteConfirmed);
            $('#noDeleteButton').click(deleteCancelled);
        };

        function deleteConfirmed(e) {
            e.preventDefault();
            e.stopPropagation();

            const data = {};
            data.Id = $('#selectedAccountId').val() != undefined ? $('#selectedAccountId').val() : null;
            data.Name = $('#selectedAccountName').val() != undefined ? $('#selectedAccountName').val() : '';
            $.ajax({
                type: 'POST',
                url: 'Accounts/DeleteAccount',
                dataType: 'json',
                data: data,
                success: function(result) {
                    window.location.reload();
                },
                failure: function(result) {
                    console.log('Failure: ' + result);
                },
                error: function(error) {
                    console.log('Error: ' + error);
                }
            });
        };

        function deleteCancelled(e) {
            e.preventDefault();
            e.stopPropagation();

            $('#footerOptions').css('display', 'block');
            $('#deleteConfirmationDiv').css('display', 'none');
        };

        function closeSelectedAccountDiv(e) {
            e.preventDefault();
            e.stopPropagation();

            $('#selectedAccountEmptyText').css('display', 'block');
            $('.selectedInput').css('display', 'none');
            $('.selectedInputLabel').css('display', 'none');
            $('#selectedAccountFooter').css('display', 'none');
            $('#selectedAccountName').val('');
            $('#selectedAccountBalance').val(0);
            $('#selectedAccountRequiredSavings').val(0);
        };

        function addTableListeners() {
            $('.tableRow').unbind('click').click(rowSelected);
            $('#editButton').unbind('click').click(saveAccount);
            $('#deleteButton').unbind('click').click(deleteAccount);
            $('#cancelButton').unbind('click').click(closeSelectedAccountDiv);
        };

        document.addEventListener("DOMContentLoaded", addTableListeners);

    </script>
}
