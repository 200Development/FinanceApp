@using X.PagedList.Mvc.Core.Common
@using X.PagedList.Mvc.Core
@model FinanceApp.ViewModels.AccountViewModel


<table class="table table-striped table-dark" id="accountsTable">
    <thead>
        <tr>
            <th scope="col"></th>
            <th scope="col">Name</th>
            <th scope="col">Balance</th>
            <th scope="col">Required Savings</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th scope="row" class="addButtonColumn"><button class="addButton" type="submit" name="submitButton" value="Add"><i class="fa fa-plus-circle addIcon"></i></button></th>
            <td>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParam"]">
                    @Html.EditorFor(model => model.Account.Name, new { htmlAttributes = new { @class = "form-control" } })
                </a>
                @Html.ValidationMessageFor(model => model.Account.Name, "", new {@class = "text-danger"})
            </td>
            <td>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">$</span>
                    </div>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParam"]">
                        @Html.EditorFor(model => model.Account.Balance, new { htmlAttributes = new { @class = "form-control" } })
                    </a>
                    @Html.ValidationMessageFor(model => model.Account.Balance, "", new { @class = "text-danger" })
                </div>
            </td>
            <td></td>
        </tr>
        @if (Model != null && Model.PagedAccounts.Count > 0)
        {
            foreach (var item in Model.PagedAccounts)
            {
                var rowId = "rowId_" + item.Id;

                var nameId = "accountName_" + item.Id;
                var balanceId = "accountBalance_" + item.Id;
                <tr class="tableRow" id="@rowId">
                    <th scope="row"></th>
                    <td id="@nameId">@item.Name</td>
                    <td id="@balanceId">@item.Balance.ToString("C")</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">No Accounts</td>
            </tr>
        }
    </tbody>
    <tfoot>
        @if (Model != null && Model.PagedAccounts.Count != 0)
        {
            <tr>
                <td colspan="4">
                    <div class="fixed-table-pagination" style="display: block;">
                        <div class="pull-left">
                            @Html.PagedListPager(Model.PagedAccounts,
                                                page => Url.Action("PageAccounts", "Accounts", new
                                                {
                                                    page,
                                                    pageSize = Model.PagedAccounts.PageSize,
                                                    TotalItemCount = Model.PagedAccounts.TotalItemCount,
                                                    CurrentPage = Model.PagedAccounts.PageNumber,
                                                    sortOrder = "",
                                                    fieldName = "",
                                                    IsShowControls = false,
                                                    IsShowFirstLast = false,
                                                    IsShowPages = true
                                                }),
                                                PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(
                                                    new PagedListRenderOptions(),
                                                    new AjaxOptions()
                                                    {
                                                        HttpMethod = "GET",
                                                        UpdateTargetId = "accountsTable",
                                                        OnComplete = "addTableListeners"
                                                    }))
                        </div>
                        <div class="pull-right pagination-detail header-title pd-tp-bt-10">
                            <span class="pagination pagination-info">
                                Page @(Model.PagedAccounts.PageCount < Model.PagedAccounts.PageNumber ? 0 : Model.PagedAccounts.PageNumber) of @Model.PagedAccounts.PageCount
                                /
                                @(Model.PagedAccounts.TotalItemCount) items in @(Model.PagedAccounts.PageCount) pages
                            </span>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tfoot>
</table>